/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CreateSquareChatResponse implements org.apache.thrift.TBase<CreateSquareChatResponse, CreateSquareChatResponse._Fields>, java.io.Serializable, Cloneable, Comparable<CreateSquareChatResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateSquareChatResponse");

  private static final org.apache.thrift.protocol.TField SQUARE_CHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("squareChat", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField SQUARE_CHAT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("squareChatStatus", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField SQUARE_CHAT_MEMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("squareChatMember", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CreateSquareChatResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CreateSquareChatResponseTupleSchemeFactory());
  }

  public SquareChat squareChat; // required
  public SquareChatStatus squareChatStatus; // required
  public SquareChatMember squareChatMember; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQUARE_CHAT((short)1, "squareChat"),
    SQUARE_CHAT_STATUS((short)2, "squareChatStatus"),
    SQUARE_CHAT_MEMBER((short)3, "squareChatMember");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQUARE_CHAT
          return SQUARE_CHAT;
        case 2: // SQUARE_CHAT_STATUS
          return SQUARE_CHAT_STATUS;
        case 3: // SQUARE_CHAT_MEMBER
          return SQUARE_CHAT_MEMBER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQUARE_CHAT, new org.apache.thrift.meta_data.FieldMetaData("squareChat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareChat.class)));
    tmpMap.put(_Fields.SQUARE_CHAT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("squareChatStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareChatStatus.class)));
    tmpMap.put(_Fields.SQUARE_CHAT_MEMBER, new org.apache.thrift.meta_data.FieldMetaData("squareChatMember", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareChatMember.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateSquareChatResponse.class, metaDataMap);
  }

  public CreateSquareChatResponse() {
  }

  public CreateSquareChatResponse(
    SquareChat squareChat,
    SquareChatStatus squareChatStatus,
    SquareChatMember squareChatMember)
  {
    this();
    this.squareChat = squareChat;
    this.squareChatStatus = squareChatStatus;
    this.squareChatMember = squareChatMember;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CreateSquareChatResponse(CreateSquareChatResponse other) {
    if (other.isSetSquareChat()) {
      this.squareChat = new SquareChat(other.squareChat);
    }
    if (other.isSetSquareChatStatus()) {
      this.squareChatStatus = new SquareChatStatus(other.squareChatStatus);
    }
    if (other.isSetSquareChatMember()) {
      this.squareChatMember = new SquareChatMember(other.squareChatMember);
    }
  }

  public CreateSquareChatResponse deepCopy() {
    return new CreateSquareChatResponse(this);
  }

  @Override
  public void clear() {
    this.squareChat = null;
    this.squareChatStatus = null;
    this.squareChatMember = null;
  }

  public SquareChat getSquareChat() {
    return this.squareChat;
  }

  public CreateSquareChatResponse setSquareChat(SquareChat squareChat) {
    this.squareChat = squareChat;
    return this;
  }

  public void unsetSquareChat() {
    this.squareChat = null;
  }

  /** Returns true if field squareChat is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChat() {
    return this.squareChat != null;
  }

  public void setSquareChatIsSet(boolean value) {
    if (!value) {
      this.squareChat = null;
    }
  }

  public SquareChatStatus getSquareChatStatus() {
    return this.squareChatStatus;
  }

  public CreateSquareChatResponse setSquareChatStatus(SquareChatStatus squareChatStatus) {
    this.squareChatStatus = squareChatStatus;
    return this;
  }

  public void unsetSquareChatStatus() {
    this.squareChatStatus = null;
  }

  /** Returns true if field squareChatStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatStatus() {
    return this.squareChatStatus != null;
  }

  public void setSquareChatStatusIsSet(boolean value) {
    if (!value) {
      this.squareChatStatus = null;
    }
  }

  public SquareChatMember getSquareChatMember() {
    return this.squareChatMember;
  }

  public CreateSquareChatResponse setSquareChatMember(SquareChatMember squareChatMember) {
    this.squareChatMember = squareChatMember;
    return this;
  }

  public void unsetSquareChatMember() {
    this.squareChatMember = null;
  }

  /** Returns true if field squareChatMember is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMember() {
    return this.squareChatMember != null;
  }

  public void setSquareChatMemberIsSet(boolean value) {
    if (!value) {
      this.squareChatMember = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SQUARE_CHAT:
      if (value == null) {
        unsetSquareChat();
      } else {
        setSquareChat((SquareChat)value);
      }
      break;

    case SQUARE_CHAT_STATUS:
      if (value == null) {
        unsetSquareChatStatus();
      } else {
        setSquareChatStatus((SquareChatStatus)value);
      }
      break;

    case SQUARE_CHAT_MEMBER:
      if (value == null) {
        unsetSquareChatMember();
      } else {
        setSquareChatMember((SquareChatMember)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SQUARE_CHAT:
      return getSquareChat();

    case SQUARE_CHAT_STATUS:
      return getSquareChatStatus();

    case SQUARE_CHAT_MEMBER:
      return getSquareChatMember();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SQUARE_CHAT:
      return isSetSquareChat();
    case SQUARE_CHAT_STATUS:
      return isSetSquareChatStatus();
    case SQUARE_CHAT_MEMBER:
      return isSetSquareChatMember();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CreateSquareChatResponse)
      return this.equals((CreateSquareChatResponse)that);
    return false;
  }

  public boolean equals(CreateSquareChatResponse that) {
    if (that == null)
      return false;

    boolean this_present_squareChat = true && this.isSetSquareChat();
    boolean that_present_squareChat = true && that.isSetSquareChat();
    if (this_present_squareChat || that_present_squareChat) {
      if (!(this_present_squareChat && that_present_squareChat))
        return false;
      if (!this.squareChat.equals(that.squareChat))
        return false;
    }

    boolean this_present_squareChatStatus = true && this.isSetSquareChatStatus();
    boolean that_present_squareChatStatus = true && that.isSetSquareChatStatus();
    if (this_present_squareChatStatus || that_present_squareChatStatus) {
      if (!(this_present_squareChatStatus && that_present_squareChatStatus))
        return false;
      if (!this.squareChatStatus.equals(that.squareChatStatus))
        return false;
    }

    boolean this_present_squareChatMember = true && this.isSetSquareChatMember();
    boolean that_present_squareChatMember = true && that.isSetSquareChatMember();
    if (this_present_squareChatMember || that_present_squareChatMember) {
      if (!(this_present_squareChatMember && that_present_squareChatMember))
        return false;
      if (!this.squareChatMember.equals(that.squareChatMember))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CreateSquareChatResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSquareChat()).compareTo(other.isSetSquareChat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareChat, other.squareChat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquareChatStatus()).compareTo(other.isSetSquareChatStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareChatStatus, other.squareChatStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquareChatMember()).compareTo(other.isSetSquareChatMember());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMember()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareChatMember, other.squareChatMember);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CreateSquareChatResponse(");
    boolean first = true;

    sb.append("squareChat:");
    if (this.squareChat == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChatStatus:");
    if (this.squareChatStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatStatus);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChatMember:");
    if (this.squareChatMember == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMember);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (squareChat != null) {
      squareChat.validate();
    }
    if (squareChatStatus != null) {
      squareChatStatus.validate();
    }
    if (squareChatMember != null) {
      squareChatMember.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CreateSquareChatResponseStandardSchemeFactory implements SchemeFactory {
    public CreateSquareChatResponseStandardScheme getScheme() {
      return new CreateSquareChatResponseStandardScheme();
    }
  }

  private static class CreateSquareChatResponseStandardScheme extends StandardScheme<CreateSquareChatResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CreateSquareChatResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQUARE_CHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.squareChat = new SquareChat();
              struct.squareChat.read(iprot);
              struct.setSquareChatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SQUARE_CHAT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.squareChatStatus = new SquareChatStatus();
              struct.squareChatStatus.read(iprot);
              struct.setSquareChatStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SQUARE_CHAT_MEMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.squareChatMember = new SquareChatMember();
              struct.squareChatMember.read(iprot);
              struct.setSquareChatMemberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CreateSquareChatResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.squareChat != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_FIELD_DESC);
        struct.squareChat.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.squareChatStatus != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_STATUS_FIELD_DESC);
        struct.squareChatStatus.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.squareChatMember != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MEMBER_FIELD_DESC);
        struct.squareChatMember.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CreateSquareChatResponseTupleSchemeFactory implements SchemeFactory {
    public CreateSquareChatResponseTupleScheme getScheme() {
      return new CreateSquareChatResponseTupleScheme();
    }
  }

  private static class CreateSquareChatResponseTupleScheme extends TupleScheme<CreateSquareChatResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CreateSquareChatResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSquareChat()) {
        optionals.set(0);
      }
      if (struct.isSetSquareChatStatus()) {
        optionals.set(1);
      }
      if (struct.isSetSquareChatMember()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSquareChat()) {
        struct.squareChat.write(oprot);
      }
      if (struct.isSetSquareChatStatus()) {
        struct.squareChatStatus.write(oprot);
      }
      if (struct.isSetSquareChatMember()) {
        struct.squareChatMember.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CreateSquareChatResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.squareChat = new SquareChat();
        struct.squareChat.read(iprot);
        struct.setSquareChatIsSet(true);
      }
      if (incoming.get(1)) {
        struct.squareChatStatus = new SquareChatStatus();
        struct.squareChatStatus.read(iprot);
        struct.setSquareChatStatusIsSet(true);
      }
      if (incoming.get(2)) {
        struct.squareChatMember = new SquareChatMember();
        struct.squareChatMember.read(iprot);
        struct.setSquareChatMemberIsSet(true);
      }
    }
  }

}

