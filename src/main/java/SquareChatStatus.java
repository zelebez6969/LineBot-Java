/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SquareChatStatus implements org.apache.thrift.TBase<SquareChatStatus, SquareChatStatus._Fields>, java.io.Serializable, Cloneable, Comparable<SquareChatStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SquareChatStatus");

  private static final org.apache.thrift.protocol.TField LAST_MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastMessage", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField SENDER_DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("senderDisplayName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OTHER_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("otherStatus", org.apache.thrift.protocol.TType.STRUCT, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SquareChatStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SquareChatStatusTupleSchemeFactory());
  }

  public SquareMessage lastMessage; // required
  public String senderDisplayName; // required
  public SquareChatStatusWithoutMessage otherStatus; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_MESSAGE((short)3, "lastMessage"),
    SENDER_DISPLAY_NAME((short)4, "senderDisplayName"),
    OTHER_STATUS((short)5, "otherStatus");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 3: // LAST_MESSAGE
          return LAST_MESSAGE;
        case 4: // SENDER_DISPLAY_NAME
          return SENDER_DISPLAY_NAME;
        case 5: // OTHER_STATUS
          return OTHER_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("lastMessage", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMessage.class)));
    tmpMap.put(_Fields.SENDER_DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("senderDisplayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OTHER_STATUS, new org.apache.thrift.meta_data.FieldMetaData("otherStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareChatStatusWithoutMessage.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SquareChatStatus.class, metaDataMap);
  }

  public SquareChatStatus() {
  }

  public SquareChatStatus(
    SquareMessage lastMessage,
    String senderDisplayName,
    SquareChatStatusWithoutMessage otherStatus)
  {
    this();
    this.lastMessage = lastMessage;
    this.senderDisplayName = senderDisplayName;
    this.otherStatus = otherStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareChatStatus(SquareChatStatus other) {
    if (other.isSetLastMessage()) {
      this.lastMessage = new SquareMessage(other.lastMessage);
    }
    if (other.isSetSenderDisplayName()) {
      this.senderDisplayName = other.senderDisplayName;
    }
    if (other.isSetOtherStatus()) {
      this.otherStatus = new SquareChatStatusWithoutMessage(other.otherStatus);
    }
  }

  public SquareChatStatus deepCopy() {
    return new SquareChatStatus(this);
  }

  @Override
  public void clear() {
    this.lastMessage = null;
    this.senderDisplayName = null;
    this.otherStatus = null;
  }

  public SquareMessage getLastMessage() {
    return this.lastMessage;
  }

  public SquareChatStatus setLastMessage(SquareMessage lastMessage) {
    this.lastMessage = lastMessage;
    return this;
  }

  public void unsetLastMessage() {
    this.lastMessage = null;
  }

  /** Returns true if field lastMessage is set (has been assigned a value) and false otherwise */
  public boolean isSetLastMessage() {
    return this.lastMessage != null;
  }

  public void setLastMessageIsSet(boolean value) {
    if (!value) {
      this.lastMessage = null;
    }
  }

  public String getSenderDisplayName() {
    return this.senderDisplayName;
  }

  public SquareChatStatus setSenderDisplayName(String senderDisplayName) {
    this.senderDisplayName = senderDisplayName;
    return this;
  }

  public void unsetSenderDisplayName() {
    this.senderDisplayName = null;
  }

  /** Returns true if field senderDisplayName is set (has been assigned a value) and false otherwise */
  public boolean isSetSenderDisplayName() {
    return this.senderDisplayName != null;
  }

  public void setSenderDisplayNameIsSet(boolean value) {
    if (!value) {
      this.senderDisplayName = null;
    }
  }

  public SquareChatStatusWithoutMessage getOtherStatus() {
    return this.otherStatus;
  }

  public SquareChatStatus setOtherStatus(SquareChatStatusWithoutMessage otherStatus) {
    this.otherStatus = otherStatus;
    return this;
  }

  public void unsetOtherStatus() {
    this.otherStatus = null;
  }

  /** Returns true if field otherStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetOtherStatus() {
    return this.otherStatus != null;
  }

  public void setOtherStatusIsSet(boolean value) {
    if (!value) {
      this.otherStatus = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_MESSAGE:
      if (value == null) {
        unsetLastMessage();
      } else {
        setLastMessage((SquareMessage)value);
      }
      break;

    case SENDER_DISPLAY_NAME:
      if (value == null) {
        unsetSenderDisplayName();
      } else {
        setSenderDisplayName((String)value);
      }
      break;

    case OTHER_STATUS:
      if (value == null) {
        unsetOtherStatus();
      } else {
        setOtherStatus((SquareChatStatusWithoutMessage)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_MESSAGE:
      return getLastMessage();

    case SENDER_DISPLAY_NAME:
      return getSenderDisplayName();

    case OTHER_STATUS:
      return getOtherStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_MESSAGE:
      return isSetLastMessage();
    case SENDER_DISPLAY_NAME:
      return isSetSenderDisplayName();
    case OTHER_STATUS:
      return isSetOtherStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareChatStatus)
      return this.equals((SquareChatStatus)that);
    return false;
  }

  public boolean equals(SquareChatStatus that) {
    if (that == null)
      return false;

    boolean this_present_lastMessage = true && this.isSetLastMessage();
    boolean that_present_lastMessage = true && that.isSetLastMessage();
    if (this_present_lastMessage || that_present_lastMessage) {
      if (!(this_present_lastMessage && that_present_lastMessage))
        return false;
      if (!this.lastMessage.equals(that.lastMessage))
        return false;
    }

    boolean this_present_senderDisplayName = true && this.isSetSenderDisplayName();
    boolean that_present_senderDisplayName = true && that.isSetSenderDisplayName();
    if (this_present_senderDisplayName || that_present_senderDisplayName) {
      if (!(this_present_senderDisplayName && that_present_senderDisplayName))
        return false;
      if (!this.senderDisplayName.equals(that.senderDisplayName))
        return false;
    }

    boolean this_present_otherStatus = true && this.isSetOtherStatus();
    boolean that_present_otherStatus = true && that.isSetOtherStatus();
    if (this_present_otherStatus || that_present_otherStatus) {
      if (!(this_present_otherStatus && that_present_otherStatus))
        return false;
      if (!this.otherStatus.equals(that.otherStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SquareChatStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLastMessage()).compareTo(other.isSetLastMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastMessage, other.lastMessage);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSenderDisplayName()).compareTo(other.isSetSenderDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSenderDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.senderDisplayName, other.senderDisplayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOtherStatus()).compareTo(other.isSetOtherStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOtherStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.otherStatus, other.otherStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SquareChatStatus(");
    boolean first = true;

    sb.append("lastMessage:");
    if (this.lastMessage == null) {
      sb.append("null");
    } else {
      sb.append(this.lastMessage);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("senderDisplayName:");
    if (this.senderDisplayName == null) {
      sb.append("null");
    } else {
      sb.append(this.senderDisplayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("otherStatus:");
    if (this.otherStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.otherStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (lastMessage != null) {
      lastMessage.validate();
    }
    if (otherStatus != null) {
      otherStatus.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SquareChatStatusStandardSchemeFactory implements SchemeFactory {
    public SquareChatStatusStandardScheme getScheme() {
      return new SquareChatStatusStandardScheme();
    }
  }

  private static class SquareChatStatusStandardScheme extends StandardScheme<SquareChatStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SquareChatStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 3: // LAST_MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.lastMessage = new SquareMessage();
              struct.lastMessage.read(iprot);
              struct.setLastMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SENDER_DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.senderDisplayName = iprot.readString();
              struct.setSenderDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OTHER_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.otherStatus = new SquareChatStatusWithoutMessage();
              struct.otherStatus.read(iprot);
              struct.setOtherStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SquareChatStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lastMessage != null) {
        oprot.writeFieldBegin(LAST_MESSAGE_FIELD_DESC);
        struct.lastMessage.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.senderDisplayName != null) {
        oprot.writeFieldBegin(SENDER_DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.senderDisplayName);
        oprot.writeFieldEnd();
      }
      if (struct.otherStatus != null) {
        oprot.writeFieldBegin(OTHER_STATUS_FIELD_DESC);
        struct.otherStatus.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SquareChatStatusTupleSchemeFactory implements SchemeFactory {
    public SquareChatStatusTupleScheme getScheme() {
      return new SquareChatStatusTupleScheme();
    }
  }

  private static class SquareChatStatusTupleScheme extends TupleScheme<SquareChatStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SquareChatStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLastMessage()) {
        optionals.set(0);
      }
      if (struct.isSetSenderDisplayName()) {
        optionals.set(1);
      }
      if (struct.isSetOtherStatus()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLastMessage()) {
        struct.lastMessage.write(oprot);
      }
      if (struct.isSetSenderDisplayName()) {
        oprot.writeString(struct.senderDisplayName);
      }
      if (struct.isSetOtherStatus()) {
        struct.otherStatus.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SquareChatStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.lastMessage = new SquareMessage();
        struct.lastMessage.read(iprot);
        struct.setLastMessageIsSet(true);
      }
      if (incoming.get(1)) {
        struct.senderDisplayName = iprot.readString();
        struct.setSenderDisplayNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.otherStatus = new SquareChatStatusWithoutMessage();
        struct.otherStatus.read(iprot);
        struct.setOtherStatusIsSet(true);
      }
    }
  }

}

