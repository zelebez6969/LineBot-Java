/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class GroupCall implements org.apache.thrift.TBase<GroupCall, GroupCall._Fields>, java.io.Serializable, Cloneable, Comparable<GroupCall> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GroupCall");

  private static final org.apache.thrift.protocol.TField ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("online", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField CHAT_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("chatMid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField HOST_MIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostMids", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField MEMBER_MIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("memberMids", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField STARTED_FIELD_DESC = new org.apache.thrift.protocol.TField("started", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MEDIA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("mediaType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new GroupCallStandardSchemeFactory());
    schemes.put(TupleScheme.class, new GroupCallTupleSchemeFactory());
  }

  public boolean online; // required
  public String chatMid; // required
  public String hostMids; // required
  public List<String> memberMids; // required
  public long started; // required
  public int mediaType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ONLINE((short)1, "online"),
    CHAT_MID((short)2, "chatMid"),
    HOST_MIDS((short)3, "hostMids"),
    MEMBER_MIDS((short)4, "memberMids"),
    STARTED((short)5, "started"),
    MEDIA_TYPE((short)6, "mediaType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ONLINE
          return ONLINE;
        case 2: // CHAT_MID
          return CHAT_MID;
        case 3: // HOST_MIDS
          return HOST_MIDS;
        case 4: // MEMBER_MIDS
          return MEMBER_MIDS;
        case 5: // STARTED
          return STARTED;
        case 6: // MEDIA_TYPE
          return MEDIA_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ONLINE_ISSET_ID = 0;
  private static final int __STARTED_ISSET_ID = 1;
  private static final int __MEDIATYPE_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ONLINE, new org.apache.thrift.meta_data.FieldMetaData("online", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CHAT_MID, new org.apache.thrift.meta_data.FieldMetaData("chatMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOST_MIDS, new org.apache.thrift.meta_data.FieldMetaData("hostMids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MEMBER_MIDS, new org.apache.thrift.meta_data.FieldMetaData("memberMids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.STARTED, new org.apache.thrift.meta_data.FieldMetaData("started", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MEDIA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("mediaType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GroupCall.class, metaDataMap);
  }

  public GroupCall() {
  }

  public GroupCall(
    boolean online,
    String chatMid,
    String hostMids,
    List<String> memberMids,
    long started,
    int mediaType)
  {
    this();
    this.online = online;
    setOnlineIsSet(true);
    this.chatMid = chatMid;
    this.hostMids = hostMids;
    this.memberMids = memberMids;
    this.started = started;
    setStartedIsSet(true);
    this.mediaType = mediaType;
    setMediaTypeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public GroupCall(GroupCall other) {
    __isset_bitfield = other.__isset_bitfield;
    this.online = other.online;
    if (other.isSetChatMid()) {
      this.chatMid = other.chatMid;
    }
    if (other.isSetHostMids()) {
      this.hostMids = other.hostMids;
    }
    if (other.isSetMemberMids()) {
      List<String> __this__memberMids = new ArrayList<String>(other.memberMids);
      this.memberMids = __this__memberMids;
    }
    this.started = other.started;
    this.mediaType = other.mediaType;
  }

  public GroupCall deepCopy() {
    return new GroupCall(this);
  }

  @Override
  public void clear() {
    setOnlineIsSet(false);
    this.online = false;
    this.chatMid = null;
    this.hostMids = null;
    this.memberMids = null;
    setStartedIsSet(false);
    this.started = 0;
    setMediaTypeIsSet(false);
    this.mediaType = 0;
  }

  public boolean isOnline() {
    return this.online;
  }

  public GroupCall setOnline(boolean online) {
    this.online = online;
    setOnlineIsSet(true);
    return this;
  }

  public void unsetOnline() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  /** Returns true if field online is set (has been assigned a value) and false otherwise */
  public boolean isSetOnline() {
    return EncodingUtils.testBit(__isset_bitfield, __ONLINE_ISSET_ID);
  }

  public void setOnlineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ONLINE_ISSET_ID, value);
  }

  public String getChatMid() {
    return this.chatMid;
  }

  public GroupCall setChatMid(String chatMid) {
    this.chatMid = chatMid;
    return this;
  }

  public void unsetChatMid() {
    this.chatMid = null;
  }

  /** Returns true if field chatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetChatMid() {
    return this.chatMid != null;
  }

  public void setChatMidIsSet(boolean value) {
    if (!value) {
      this.chatMid = null;
    }
  }

  public String getHostMids() {
    return this.hostMids;
  }

  public GroupCall setHostMids(String hostMids) {
    this.hostMids = hostMids;
    return this;
  }

  public void unsetHostMids() {
    this.hostMids = null;
  }

  /** Returns true if field hostMids is set (has been assigned a value) and false otherwise */
  public boolean isSetHostMids() {
    return this.hostMids != null;
  }

  public void setHostMidsIsSet(boolean value) {
    if (!value) {
      this.hostMids = null;
    }
  }

  public int getMemberMidsSize() {
    return (this.memberMids == null) ? 0 : this.memberMids.size();
  }

  public java.util.Iterator<String> getMemberMidsIterator() {
    return (this.memberMids == null) ? null : this.memberMids.iterator();
  }

  public void addToMemberMids(String elem) {
    if (this.memberMids == null) {
      this.memberMids = new ArrayList<String>();
    }
    this.memberMids.add(elem);
  }

  public List<String> getMemberMids() {
    return this.memberMids;
  }

  public GroupCall setMemberMids(List<String> memberMids) {
    this.memberMids = memberMids;
    return this;
  }

  public void unsetMemberMids() {
    this.memberMids = null;
  }

  /** Returns true if field memberMids is set (has been assigned a value) and false otherwise */
  public boolean isSetMemberMids() {
    return this.memberMids != null;
  }

  public void setMemberMidsIsSet(boolean value) {
    if (!value) {
      this.memberMids = null;
    }
  }

  public long getStarted() {
    return this.started;
  }

  public GroupCall setStarted(long started) {
    this.started = started;
    setStartedIsSet(true);
    return this;
  }

  public void unsetStarted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTED_ISSET_ID);
  }

  /** Returns true if field started is set (has been assigned a value) and false otherwise */
  public boolean isSetStarted() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTED_ISSET_ID);
  }

  public void setStartedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTED_ISSET_ID, value);
  }

  public int getMediaType() {
    return this.mediaType;
  }

  public GroupCall setMediaType(int mediaType) {
    this.mediaType = mediaType;
    setMediaTypeIsSet(true);
    return this;
  }

  public void unsetMediaType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MEDIATYPE_ISSET_ID);
  }

  /** Returns true if field mediaType is set (has been assigned a value) and false otherwise */
  public boolean isSetMediaType() {
    return EncodingUtils.testBit(__isset_bitfield, __MEDIATYPE_ISSET_ID);
  }

  public void setMediaTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MEDIATYPE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ONLINE:
      if (value == null) {
        unsetOnline();
      } else {
        setOnline((Boolean)value);
      }
      break;

    case CHAT_MID:
      if (value == null) {
        unsetChatMid();
      } else {
        setChatMid((String)value);
      }
      break;

    case HOST_MIDS:
      if (value == null) {
        unsetHostMids();
      } else {
        setHostMids((String)value);
      }
      break;

    case MEMBER_MIDS:
      if (value == null) {
        unsetMemberMids();
      } else {
        setMemberMids((List<String>)value);
      }
      break;

    case STARTED:
      if (value == null) {
        unsetStarted();
      } else {
        setStarted((Long)value);
      }
      break;

    case MEDIA_TYPE:
      if (value == null) {
        unsetMediaType();
      } else {
        setMediaType((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ONLINE:
      return Boolean.valueOf(isOnline());

    case CHAT_MID:
      return getChatMid();

    case HOST_MIDS:
      return getHostMids();

    case MEMBER_MIDS:
      return getMemberMids();

    case STARTED:
      return Long.valueOf(getStarted());

    case MEDIA_TYPE:
      return Integer.valueOf(getMediaType());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ONLINE:
      return isSetOnline();
    case CHAT_MID:
      return isSetChatMid();
    case HOST_MIDS:
      return isSetHostMids();
    case MEMBER_MIDS:
      return isSetMemberMids();
    case STARTED:
      return isSetStarted();
    case MEDIA_TYPE:
      return isSetMediaType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof GroupCall)
      return this.equals((GroupCall)that);
    return false;
  }

  public boolean equals(GroupCall that) {
    if (that == null)
      return false;

    boolean this_present_online = true;
    boolean that_present_online = true;
    if (this_present_online || that_present_online) {
      if (!(this_present_online && that_present_online))
        return false;
      if (this.online != that.online)
        return false;
    }

    boolean this_present_chatMid = true && this.isSetChatMid();
    boolean that_present_chatMid = true && that.isSetChatMid();
    if (this_present_chatMid || that_present_chatMid) {
      if (!(this_present_chatMid && that_present_chatMid))
        return false;
      if (!this.chatMid.equals(that.chatMid))
        return false;
    }

    boolean this_present_hostMids = true && this.isSetHostMids();
    boolean that_present_hostMids = true && that.isSetHostMids();
    if (this_present_hostMids || that_present_hostMids) {
      if (!(this_present_hostMids && that_present_hostMids))
        return false;
      if (!this.hostMids.equals(that.hostMids))
        return false;
    }

    boolean this_present_memberMids = true && this.isSetMemberMids();
    boolean that_present_memberMids = true && that.isSetMemberMids();
    if (this_present_memberMids || that_present_memberMids) {
      if (!(this_present_memberMids && that_present_memberMids))
        return false;
      if (!this.memberMids.equals(that.memberMids))
        return false;
    }

    boolean this_present_started = true;
    boolean that_present_started = true;
    if (this_present_started || that_present_started) {
      if (!(this_present_started && that_present_started))
        return false;
      if (this.started != that.started)
        return false;
    }

    boolean this_present_mediaType = true;
    boolean that_present_mediaType = true;
    if (this_present_mediaType || that_present_mediaType) {
      if (!(this_present_mediaType && that_present_mediaType))
        return false;
      if (this.mediaType != that.mediaType)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(GroupCall other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOnline()).compareTo(other.isSetOnline());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOnline()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.online, other.online);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatMid()).compareTo(other.isSetChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatMid, other.chatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostMids()).compareTo(other.isSetHostMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostMids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostMids, other.hostMids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMemberMids()).compareTo(other.isSetMemberMids());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMemberMids()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberMids, other.memberMids);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarted()).compareTo(other.isSetStarted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.started, other.started);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMediaType()).compareTo(other.isSetMediaType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMediaType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mediaType, other.mediaType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("GroupCall(");
    boolean first = true;

    sb.append("online:");
    sb.append(this.online);
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatMid:");
    if (this.chatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.chatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostMids:");
    if (this.hostMids == null) {
      sb.append("null");
    } else {
      sb.append(this.hostMids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("memberMids:");
    if (this.memberMids == null) {
      sb.append("null");
    } else {
      sb.append(this.memberMids);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("started:");
    sb.append(this.started);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mediaType:");
    sb.append(this.mediaType);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class GroupCallStandardSchemeFactory implements SchemeFactory {
    public GroupCallStandardScheme getScheme() {
      return new GroupCallStandardScheme();
    }
  }

  private static class GroupCallStandardScheme extends StandardScheme<GroupCall> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, GroupCall struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ONLINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.online = iprot.readBool();
              struct.setOnlineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CHAT_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatMid = iprot.readString();
              struct.setChatMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HOST_MIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostMids = iprot.readString();
              struct.setHostMidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MEMBER_MIDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list424 = iprot.readListBegin();
                struct.memberMids = new ArrayList<String>(_list424.size);
                for (int _i425 = 0; _i425 < _list424.size; ++_i425)
                {
                  String _elem426;
                  _elem426 = iprot.readString();
                  struct.memberMids.add(_elem426);
                }
                iprot.readListEnd();
              }
              struct.setMemberMidsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STARTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.started = iprot.readI64();
              struct.setStartedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MEDIA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.mediaType = iprot.readI32();
              struct.setMediaTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, GroupCall struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ONLINE_FIELD_DESC);
      oprot.writeBool(struct.online);
      oprot.writeFieldEnd();
      if (struct.chatMid != null) {
        oprot.writeFieldBegin(CHAT_MID_FIELD_DESC);
        oprot.writeString(struct.chatMid);
        oprot.writeFieldEnd();
      }
      if (struct.hostMids != null) {
        oprot.writeFieldBegin(HOST_MIDS_FIELD_DESC);
        oprot.writeString(struct.hostMids);
        oprot.writeFieldEnd();
      }
      if (struct.memberMids != null) {
        oprot.writeFieldBegin(MEMBER_MIDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.memberMids.size()));
          for (String _iter427 : struct.memberMids)
          {
            oprot.writeString(_iter427);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STARTED_FIELD_DESC);
      oprot.writeI64(struct.started);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MEDIA_TYPE_FIELD_DESC);
      oprot.writeI32(struct.mediaType);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class GroupCallTupleSchemeFactory implements SchemeFactory {
    public GroupCallTupleScheme getScheme() {
      return new GroupCallTupleScheme();
    }
  }

  private static class GroupCallTupleScheme extends TupleScheme<GroupCall> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, GroupCall struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOnline()) {
        optionals.set(0);
      }
      if (struct.isSetChatMid()) {
        optionals.set(1);
      }
      if (struct.isSetHostMids()) {
        optionals.set(2);
      }
      if (struct.isSetMemberMids()) {
        optionals.set(3);
      }
      if (struct.isSetStarted()) {
        optionals.set(4);
      }
      if (struct.isSetMediaType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOnline()) {
        oprot.writeBool(struct.online);
      }
      if (struct.isSetChatMid()) {
        oprot.writeString(struct.chatMid);
      }
      if (struct.isSetHostMids()) {
        oprot.writeString(struct.hostMids);
      }
      if (struct.isSetMemberMids()) {
        {
          oprot.writeI32(struct.memberMids.size());
          for (String _iter428 : struct.memberMids)
          {
            oprot.writeString(_iter428);
          }
        }
      }
      if (struct.isSetStarted()) {
        oprot.writeI64(struct.started);
      }
      if (struct.isSetMediaType()) {
        oprot.writeI32(struct.mediaType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, GroupCall struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.online = iprot.readBool();
        struct.setOnlineIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chatMid = iprot.readString();
        struct.setChatMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.hostMids = iprot.readString();
        struct.setHostMidsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list429 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.memberMids = new ArrayList<String>(_list429.size);
          for (int _i430 = 0; _i430 < _list429.size; ++_i430)
          {
            String _elem431;
            _elem431 = iprot.readString();
            struct.memberMids.add(_elem431);
          }
        }
        struct.setMemberMidsIsSet(true);
      }
      if (incoming.get(4)) {
        struct.started = iprot.readI64();
        struct.setStartedIsSet(true);
      }
      if (incoming.get(5)) {
        struct.mediaType = iprot.readI32();
        struct.setMediaTypeIsSet(true);
      }
    }
  }

}

