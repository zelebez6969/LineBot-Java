/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApproveSquareMembersResponse implements org.apache.thrift.TBase<ApproveSquareMembersResponse, ApproveSquareMembersResponse._Fields>, java.io.Serializable, Cloneable, Comparable<ApproveSquareMembersResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApproveSquareMembersResponse");

  private static final org.apache.thrift.protocol.TField APPROVED_MEMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("approvedMembers", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRUCT, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApproveSquareMembersResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApproveSquareMembersResponseTupleSchemeFactory());
  }

  public List<SquareMember> approvedMembers; // required
  public SquareStatus status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    APPROVED_MEMBERS((short)1, "approvedMembers"),
    STATUS((short)2, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPROVED_MEMBERS
          return APPROVED_MEMBERS;
        case 2: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPROVED_MEMBERS, new org.apache.thrift.meta_data.FieldMetaData("approvedMembers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareMember.class))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SquareStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApproveSquareMembersResponse.class, metaDataMap);
  }

  public ApproveSquareMembersResponse() {
  }

  public ApproveSquareMembersResponse(
    List<SquareMember> approvedMembers,
    SquareStatus status)
  {
    this();
    this.approvedMembers = approvedMembers;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApproveSquareMembersResponse(ApproveSquareMembersResponse other) {
    if (other.isSetApprovedMembers()) {
      List<SquareMember> __this__approvedMembers = new ArrayList<SquareMember>(other.approvedMembers.size());
      for (SquareMember other_element : other.approvedMembers) {
        __this__approvedMembers.add(new SquareMember(other_element));
      }
      this.approvedMembers = __this__approvedMembers;
    }
    if (other.isSetStatus()) {
      this.status = new SquareStatus(other.status);
    }
  }

  public ApproveSquareMembersResponse deepCopy() {
    return new ApproveSquareMembersResponse(this);
  }

  @Override
  public void clear() {
    this.approvedMembers = null;
    this.status = null;
  }

  public int getApprovedMembersSize() {
    return (this.approvedMembers == null) ? 0 : this.approvedMembers.size();
  }

  public java.util.Iterator<SquareMember> getApprovedMembersIterator() {
    return (this.approvedMembers == null) ? null : this.approvedMembers.iterator();
  }

  public void addToApprovedMembers(SquareMember elem) {
    if (this.approvedMembers == null) {
      this.approvedMembers = new ArrayList<SquareMember>();
    }
    this.approvedMembers.add(elem);
  }

  public List<SquareMember> getApprovedMembers() {
    return this.approvedMembers;
  }

  public ApproveSquareMembersResponse setApprovedMembers(List<SquareMember> approvedMembers) {
    this.approvedMembers = approvedMembers;
    return this;
  }

  public void unsetApprovedMembers() {
    this.approvedMembers = null;
  }

  /** Returns true if field approvedMembers is set (has been assigned a value) and false otherwise */
  public boolean isSetApprovedMembers() {
    return this.approvedMembers != null;
  }

  public void setApprovedMembersIsSet(boolean value) {
    if (!value) {
      this.approvedMembers = null;
    }
  }

  public SquareStatus getStatus() {
    return this.status;
  }

  public ApproveSquareMembersResponse setStatus(SquareStatus status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case APPROVED_MEMBERS:
      if (value == null) {
        unsetApprovedMembers();
      } else {
        setApprovedMembers((List<SquareMember>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((SquareStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case APPROVED_MEMBERS:
      return getApprovedMembers();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case APPROVED_MEMBERS:
      return isSetApprovedMembers();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApproveSquareMembersResponse)
      return this.equals((ApproveSquareMembersResponse)that);
    return false;
  }

  public boolean equals(ApproveSquareMembersResponse that) {
    if (that == null)
      return false;

    boolean this_present_approvedMembers = true && this.isSetApprovedMembers();
    boolean that_present_approvedMembers = true && that.isSetApprovedMembers();
    if (this_present_approvedMembers || that_present_approvedMembers) {
      if (!(this_present_approvedMembers && that_present_approvedMembers))
        return false;
      if (!this.approvedMembers.equals(that.approvedMembers))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ApproveSquareMembersResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetApprovedMembers()).compareTo(other.isSetApprovedMembers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApprovedMembers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.approvedMembers, other.approvedMembers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApproveSquareMembersResponse(");
    boolean first = true;

    sb.append("approvedMembers:");
    if (this.approvedMembers == null) {
      sb.append("null");
    } else {
      sb.append(this.approvedMembers);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (status != null) {
      status.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApproveSquareMembersResponseStandardSchemeFactory implements SchemeFactory {
    public ApproveSquareMembersResponseStandardScheme getScheme() {
      return new ApproveSquareMembersResponseStandardScheme();
    }
  }

  private static class ApproveSquareMembersResponseStandardScheme extends StandardScheme<ApproveSquareMembersResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApproveSquareMembersResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPROVED_MEMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list358 = iprot.readListBegin();
                struct.approvedMembers = new ArrayList<SquareMember>(_list358.size);
                for (int _i359 = 0; _i359 < _list358.size; ++_i359)
                {
                  SquareMember _elem360;
                  _elem360 = new SquareMember();
                  _elem360.read(iprot);
                  struct.approvedMembers.add(_elem360);
                }
                iprot.readListEnd();
              }
              struct.setApprovedMembersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.status = new SquareStatus();
              struct.status.read(iprot);
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApproveSquareMembersResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.approvedMembers != null) {
        oprot.writeFieldBegin(APPROVED_MEMBERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.approvedMembers.size()));
          for (SquareMember _iter361 : struct.approvedMembers)
          {
            _iter361.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        struct.status.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApproveSquareMembersResponseTupleSchemeFactory implements SchemeFactory {
    public ApproveSquareMembersResponseTupleScheme getScheme() {
      return new ApproveSquareMembersResponseTupleScheme();
    }
  }

  private static class ApproveSquareMembersResponseTupleScheme extends TupleScheme<ApproveSquareMembersResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApproveSquareMembersResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetApprovedMembers()) {
        optionals.set(0);
      }
      if (struct.isSetStatus()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetApprovedMembers()) {
        {
          oprot.writeI32(struct.approvedMembers.size());
          for (SquareMember _iter362 : struct.approvedMembers)
          {
            _iter362.write(oprot);
          }
        }
      }
      if (struct.isSetStatus()) {
        struct.status.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApproveSquareMembersResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list363 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.approvedMembers = new ArrayList<SquareMember>(_list363.size);
          for (int _i364 = 0; _i364 < _list363.size; ++_i364)
          {
            SquareMember _elem365;
            _elem365 = new SquareMember();
            _elem365.read(iprot);
            struct.approvedMembers.add(_elem365);
          }
        }
        struct.setApprovedMembersIsSet(true);
      }
      if (incoming.get(1)) {
        struct.status = new SquareStatus();
        struct.status.read(iprot);
        struct.setStatusIsSet(true);
      }
    }
  }

}

