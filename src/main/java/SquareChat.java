/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class SquareChat implements org.apache.thrift.TBase<SquareChat, SquareChat._Fields>, java.io.Serializable, Cloneable, Comparable<SquareChat> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SquareChat");

  private static final org.apache.thrift.protocol.TField SQUARE_CHAT_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("squareChatMid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SQUARE_MID_FIELD_DESC = new org.apache.thrift.protocol.TField("squareMid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CHAT_IMAGE_OBS_HASH_FIELD_DESC = new org.apache.thrift.protocol.TField("chatImageObsHash", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField SQUARE_CHAT_REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("squareChatRevision", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField MAX_MEMBER_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMemberCount", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SquareChatStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SquareChatTupleSchemeFactory());
  }

  public String squareChatMid; // required
  public String squareMid; // required
  /**
   * 
   * @see SquareChatType
   */
  public SquareChatType type; // required
  public String name; // required
  public String chatImageObsHash; // required
  public long squareChatRevision; // required
  public int maxMemberCount; // required
  /**
   * 
   * @see SquareChatState
   */
  public SquareChatState state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SQUARE_CHAT_MID((short)1, "squareChatMid"),
    SQUARE_MID((short)2, "squareMid"),
    /**
     * 
     * @see SquareChatType
     */
    TYPE((short)3, "type"),
    NAME((short)4, "name"),
    CHAT_IMAGE_OBS_HASH((short)5, "chatImageObsHash"),
    SQUARE_CHAT_REVISION((short)6, "squareChatRevision"),
    MAX_MEMBER_COUNT((short)7, "maxMemberCount"),
    /**
     * 
     * @see SquareChatState
     */
    STATE((short)8, "state");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SQUARE_CHAT_MID
          return SQUARE_CHAT_MID;
        case 2: // SQUARE_MID
          return SQUARE_MID;
        case 3: // TYPE
          return TYPE;
        case 4: // NAME
          return NAME;
        case 5: // CHAT_IMAGE_OBS_HASH
          return CHAT_IMAGE_OBS_HASH;
        case 6: // SQUARE_CHAT_REVISION
          return SQUARE_CHAT_REVISION;
        case 7: // MAX_MEMBER_COUNT
          return MAX_MEMBER_COUNT;
        case 8: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SQUARECHATREVISION_ISSET_ID = 0;
  private static final int __MAXMEMBERCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SQUARE_CHAT_MID, new org.apache.thrift.meta_data.FieldMetaData("squareChatMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQUARE_MID, new org.apache.thrift.meta_data.FieldMetaData("squareMid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SquareChatType.class)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHAT_IMAGE_OBS_HASH, new org.apache.thrift.meta_data.FieldMetaData("chatImageObsHash", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SQUARE_CHAT_REVISION, new org.apache.thrift.meta_data.FieldMetaData("squareChatRevision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_MEMBER_COUNT, new org.apache.thrift.meta_data.FieldMetaData("maxMemberCount", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SquareChatState.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SquareChat.class, metaDataMap);
  }

  public SquareChat() {
  }

  public SquareChat(
    String squareChatMid,
    String squareMid,
    SquareChatType type,
    String name,
    String chatImageObsHash,
    long squareChatRevision,
    int maxMemberCount,
    SquareChatState state)
  {
    this();
    this.squareChatMid = squareChatMid;
    this.squareMid = squareMid;
    this.type = type;
    this.name = name;
    this.chatImageObsHash = chatImageObsHash;
    this.squareChatRevision = squareChatRevision;
    setSquareChatRevisionIsSet(true);
    this.maxMemberCount = maxMemberCount;
    setMaxMemberCountIsSet(true);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SquareChat(SquareChat other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSquareChatMid()) {
      this.squareChatMid = other.squareChatMid;
    }
    if (other.isSetSquareMid()) {
      this.squareMid = other.squareMid;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetChatImageObsHash()) {
      this.chatImageObsHash = other.chatImageObsHash;
    }
    this.squareChatRevision = other.squareChatRevision;
    this.maxMemberCount = other.maxMemberCount;
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public SquareChat deepCopy() {
    return new SquareChat(this);
  }

  @Override
  public void clear() {
    this.squareChatMid = null;
    this.squareMid = null;
    this.type = null;
    this.name = null;
    this.chatImageObsHash = null;
    setSquareChatRevisionIsSet(false);
    this.squareChatRevision = 0;
    setMaxMemberCountIsSet(false);
    this.maxMemberCount = 0;
    this.state = null;
  }

  public String getSquareChatMid() {
    return this.squareChatMid;
  }

  public SquareChat setSquareChatMid(String squareChatMid) {
    this.squareChatMid = squareChatMid;
    return this;
  }

  public void unsetSquareChatMid() {
    this.squareChatMid = null;
  }

  /** Returns true if field squareChatMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatMid() {
    return this.squareChatMid != null;
  }

  public void setSquareChatMidIsSet(boolean value) {
    if (!value) {
      this.squareChatMid = null;
    }
  }

  public String getSquareMid() {
    return this.squareMid;
  }

  public SquareChat setSquareMid(String squareMid) {
    this.squareMid = squareMid;
    return this;
  }

  public void unsetSquareMid() {
    this.squareMid = null;
  }

  /** Returns true if field squareMid is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareMid() {
    return this.squareMid != null;
  }

  public void setSquareMidIsSet(boolean value) {
    if (!value) {
      this.squareMid = null;
    }
  }

  /**
   * 
   * @see SquareChatType
   */
  public SquareChatType getType() {
    return this.type;
  }

  /**
   * 
   * @see SquareChatType
   */
  public SquareChat setType(SquareChatType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getName() {
    return this.name;
  }

  public SquareChat setName(String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public String getChatImageObsHash() {
    return this.chatImageObsHash;
  }

  public SquareChat setChatImageObsHash(String chatImageObsHash) {
    this.chatImageObsHash = chatImageObsHash;
    return this;
  }

  public void unsetChatImageObsHash() {
    this.chatImageObsHash = null;
  }

  /** Returns true if field chatImageObsHash is set (has been assigned a value) and false otherwise */
  public boolean isSetChatImageObsHash() {
    return this.chatImageObsHash != null;
  }

  public void setChatImageObsHashIsSet(boolean value) {
    if (!value) {
      this.chatImageObsHash = null;
    }
  }

  public long getSquareChatRevision() {
    return this.squareChatRevision;
  }

  public SquareChat setSquareChatRevision(long squareChatRevision) {
    this.squareChatRevision = squareChatRevision;
    setSquareChatRevisionIsSet(true);
    return this;
  }

  public void unsetSquareChatRevision() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SQUARECHATREVISION_ISSET_ID);
  }

  /** Returns true if field squareChatRevision is set (has been assigned a value) and false otherwise */
  public boolean isSetSquareChatRevision() {
    return EncodingUtils.testBit(__isset_bitfield, __SQUARECHATREVISION_ISSET_ID);
  }

  public void setSquareChatRevisionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SQUARECHATREVISION_ISSET_ID, value);
  }

  public int getMaxMemberCount() {
    return this.maxMemberCount;
  }

  public SquareChat setMaxMemberCount(int maxMemberCount) {
    this.maxMemberCount = maxMemberCount;
    setMaxMemberCountIsSet(true);
    return this;
  }

  public void unsetMaxMemberCount() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXMEMBERCOUNT_ISSET_ID);
  }

  /** Returns true if field maxMemberCount is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemberCount() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXMEMBERCOUNT_ISSET_ID);
  }

  public void setMaxMemberCountIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXMEMBERCOUNT_ISSET_ID, value);
  }

  /**
   * 
   * @see SquareChatState
   */
  public SquareChatState getState() {
    return this.state;
  }

  /**
   * 
   * @see SquareChatState
   */
  public SquareChat setState(SquareChatState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SQUARE_CHAT_MID:
      if (value == null) {
        unsetSquareChatMid();
      } else {
        setSquareChatMid((String)value);
      }
      break;

    case SQUARE_MID:
      if (value == null) {
        unsetSquareMid();
      } else {
        setSquareMid((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((SquareChatType)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((String)value);
      }
      break;

    case CHAT_IMAGE_OBS_HASH:
      if (value == null) {
        unsetChatImageObsHash();
      } else {
        setChatImageObsHash((String)value);
      }
      break;

    case SQUARE_CHAT_REVISION:
      if (value == null) {
        unsetSquareChatRevision();
      } else {
        setSquareChatRevision((Long)value);
      }
      break;

    case MAX_MEMBER_COUNT:
      if (value == null) {
        unsetMaxMemberCount();
      } else {
        setMaxMemberCount((Integer)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((SquareChatState)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SQUARE_CHAT_MID:
      return getSquareChatMid();

    case SQUARE_MID:
      return getSquareMid();

    case TYPE:
      return getType();

    case NAME:
      return getName();

    case CHAT_IMAGE_OBS_HASH:
      return getChatImageObsHash();

    case SQUARE_CHAT_REVISION:
      return Long.valueOf(getSquareChatRevision());

    case MAX_MEMBER_COUNT:
      return Integer.valueOf(getMaxMemberCount());

    case STATE:
      return getState();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SQUARE_CHAT_MID:
      return isSetSquareChatMid();
    case SQUARE_MID:
      return isSetSquareMid();
    case TYPE:
      return isSetType();
    case NAME:
      return isSetName();
    case CHAT_IMAGE_OBS_HASH:
      return isSetChatImageObsHash();
    case SQUARE_CHAT_REVISION:
      return isSetSquareChatRevision();
    case MAX_MEMBER_COUNT:
      return isSetMaxMemberCount();
    case STATE:
      return isSetState();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SquareChat)
      return this.equals((SquareChat)that);
    return false;
  }

  public boolean equals(SquareChat that) {
    if (that == null)
      return false;

    boolean this_present_squareChatMid = true && this.isSetSquareChatMid();
    boolean that_present_squareChatMid = true && that.isSetSquareChatMid();
    if (this_present_squareChatMid || that_present_squareChatMid) {
      if (!(this_present_squareChatMid && that_present_squareChatMid))
        return false;
      if (!this.squareChatMid.equals(that.squareChatMid))
        return false;
    }

    boolean this_present_squareMid = true && this.isSetSquareMid();
    boolean that_present_squareMid = true && that.isSetSquareMid();
    if (this_present_squareMid || that_present_squareMid) {
      if (!(this_present_squareMid && that_present_squareMid))
        return false;
      if (!this.squareMid.equals(that.squareMid))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_chatImageObsHash = true && this.isSetChatImageObsHash();
    boolean that_present_chatImageObsHash = true && that.isSetChatImageObsHash();
    if (this_present_chatImageObsHash || that_present_chatImageObsHash) {
      if (!(this_present_chatImageObsHash && that_present_chatImageObsHash))
        return false;
      if (!this.chatImageObsHash.equals(that.chatImageObsHash))
        return false;
    }

    boolean this_present_squareChatRevision = true;
    boolean that_present_squareChatRevision = true;
    if (this_present_squareChatRevision || that_present_squareChatRevision) {
      if (!(this_present_squareChatRevision && that_present_squareChatRevision))
        return false;
      if (this.squareChatRevision != that.squareChatRevision)
        return false;
    }

    boolean this_present_maxMemberCount = true;
    boolean that_present_maxMemberCount = true;
    if (this_present_maxMemberCount || that_present_maxMemberCount) {
      if (!(this_present_maxMemberCount && that_present_maxMemberCount))
        return false;
      if (this.maxMemberCount != that.maxMemberCount)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(SquareChat other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSquareChatMid()).compareTo(other.isSetSquareChatMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareChatMid, other.squareChatMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquareMid()).compareTo(other.isSetSquareMid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareMid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareMid, other.squareMid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetChatImageObsHash()).compareTo(other.isSetChatImageObsHash());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChatImageObsHash()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chatImageObsHash, other.chatImageObsHash);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSquareChatRevision()).compareTo(other.isSetSquareChatRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSquareChatRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.squareChatRevision, other.squareChatRevision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxMemberCount()).compareTo(other.isSetMaxMemberCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemberCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMemberCount, other.maxMemberCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetState()).compareTo(other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SquareChat(");
    boolean first = true;

    sb.append("squareChatMid:");
    if (this.squareChatMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareChatMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareMid:");
    if (this.squareMid == null) {
      sb.append("null");
    } else {
      sb.append(this.squareMid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("chatImageObsHash:");
    if (this.chatImageObsHash == null) {
      sb.append("null");
    } else {
      sb.append(this.chatImageObsHash);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("squareChatRevision:");
    sb.append(this.squareChatRevision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMemberCount:");
    sb.append(this.maxMemberCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SquareChatStandardSchemeFactory implements SchemeFactory {
    public SquareChatStandardScheme getScheme() {
      return new SquareChatStandardScheme();
    }
  }

  private static class SquareChatStandardScheme extends StandardScheme<SquareChat> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SquareChat struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SQUARE_CHAT_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.squareChatMid = iprot.readString();
              struct.setSquareChatMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SQUARE_MID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.squareMid = iprot.readString();
              struct.setSquareMidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = SquareChatType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CHAT_IMAGE_OBS_HASH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chatImageObsHash = iprot.readString();
              struct.setChatImageObsHashIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SQUARE_CHAT_REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.squareChatRevision = iprot.readI64();
              struct.setSquareChatRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // MAX_MEMBER_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxMemberCount = iprot.readI32();
              struct.setMaxMemberCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = SquareChatState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SquareChat struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.squareChatMid != null) {
        oprot.writeFieldBegin(SQUARE_CHAT_MID_FIELD_DESC);
        oprot.writeString(struct.squareChatMid);
        oprot.writeFieldEnd();
      }
      if (struct.squareMid != null) {
        oprot.writeFieldBegin(SQUARE_MID_FIELD_DESC);
        oprot.writeString(struct.squareMid);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.chatImageObsHash != null) {
        oprot.writeFieldBegin(CHAT_IMAGE_OBS_HASH_FIELD_DESC);
        oprot.writeString(struct.chatImageObsHash);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SQUARE_CHAT_REVISION_FIELD_DESC);
      oprot.writeI64(struct.squareChatRevision);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_MEMBER_COUNT_FIELD_DESC);
      oprot.writeI32(struct.maxMemberCount);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SquareChatTupleSchemeFactory implements SchemeFactory {
    public SquareChatTupleScheme getScheme() {
      return new SquareChatTupleScheme();
    }
  }

  private static class SquareChatTupleScheme extends TupleScheme<SquareChat> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SquareChat struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSquareChatMid()) {
        optionals.set(0);
      }
      if (struct.isSetSquareMid()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetName()) {
        optionals.set(3);
      }
      if (struct.isSetChatImageObsHash()) {
        optionals.set(4);
      }
      if (struct.isSetSquareChatRevision()) {
        optionals.set(5);
      }
      if (struct.isSetMaxMemberCount()) {
        optionals.set(6);
      }
      if (struct.isSetState()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetSquareChatMid()) {
        oprot.writeString(struct.squareChatMid);
      }
      if (struct.isSetSquareMid()) {
        oprot.writeString(struct.squareMid);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetChatImageObsHash()) {
        oprot.writeString(struct.chatImageObsHash);
      }
      if (struct.isSetSquareChatRevision()) {
        oprot.writeI64(struct.squareChatRevision);
      }
      if (struct.isSetMaxMemberCount()) {
        oprot.writeI32(struct.maxMemberCount);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SquareChat struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.squareChatMid = iprot.readString();
        struct.setSquareChatMidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.squareMid = iprot.readString();
        struct.setSquareMidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = SquareChatType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.chatImageObsHash = iprot.readString();
        struct.setChatImageObsHashIsSet(true);
      }
      if (incoming.get(5)) {
        struct.squareChatRevision = iprot.readI64();
        struct.setSquareChatRevisionIsSet(true);
      }
      if (incoming.get(6)) {
        struct.maxMemberCount = iprot.readI32();
        struct.setMaxMemberCountIsSet(true);
      }
      if (incoming.get(7)) {
        struct.state = SquareChatState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
    }
  }

}

